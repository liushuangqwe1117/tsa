<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="
            http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context.xsd
            http://www.springframework.org/schema/mvc
            http://www.springframework.org/schema/mvc/spring-mvc.xsd">
    <!--
        use-default-filters：默认为true，如果为true在spring会自动扫描@Component, @Repository, @Service,or @Controller注解的对象
        此处只需要扫描@Controller和@ControllerAdvice注解的对象，所以设置false
     -->
    <context:component-scan base-package="com.tsa.springmvc" use-default-filters="false">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        <!--
            此注解从3.2版本引用，被@ControllerAdvice注解的对象会被当前Controller组件被扫描
            即把@ControllerAdvice注解内部使用@ExceptionHandler、@InitBinder、@ModelAttribute注解的方法应用到所有的 @RequestMapping注解的方法
            可以理解为@ControllerAdvice注解的类是一个应用于所有@RequestMapping注解的方法全局的对象
            这样我们就可以通过@InitBinder将所有的类型转换写入到一个类中，不用所有Controller都注入
        -->
        <context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
    </context:component-scan>

    <!-- 此默认实例化了HandlerMapping和HandlerAdaptor及其他对象，参考：org.springframework.web.servlet.config.MvcNamespaceHandler -->
    <!--
        配置属性说明：
        message-codes-resolver:数据校验时错误解析器，实现org.springframework.validation.MessageCodesResolver接口
        enable-matrix-variables:
            Matrix variables can appear in any path segment, each matrix variable separated with a ";" (semicolon).
            For example "/cars;color=red;year=2012". By default they're removed from the URL. If this property
            is set to true, matrix variables are not removed from the URL, and the request mapping pattern
            must use URI variable in path segments where matrix variables are expected. For example "/{cars}".
            Matrix variables can then be injected into a controller method with @MatrixVariable.
        ignore-default-model-on-redirect:默认的设置为false
            By default, the content of the "default" model is used both during rendering and redirect scenarios.
            Alternatively a controller method can declare a RedirectAttributes argument and use it to provide attributes
            for a redirect. Setting this flag to true ensures the "default" model is never used in a redirect scenario
            even if a RedirectAttributes argument is not declared. Setting it to false means the "default" model
            may be used in a redirect if the controller method doesn't declare a RedirectAttributes argument.
            The default setting is false but new applications should consider setting it to true.
            中文理解为：如果为重定向，是否使用默认模型
            举例说明：参考com.tsa.springmvc.controller.ParamTypeConvertController.save
                在save方法中添加了 model.addAttribute("test","1");
                如果方法中没有RedirectAttributes参数且annotation-driven中的ignore-default-model-on-redirect设置为false
                则在重定向时spring会自动将test=1附加到url后面，既最候重定向的地址为http://localhost:8080/paramtype/edit?test=1
     -->
    <mvc:annotation-driven content-negotiation-manager="contentNegotiationManager"
                           validator="validator"
                           conversion-service="conversionService"
                           enable-matrix-variables="true"
                           ignore-default-model-on-redirect="true">

    </mvc:annotation-driven>

    <!-- 数据校验器,通过annotation-driven对象注入到相关对象中 -->
    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
        <property name="providerClass" value="org.hibernate.validator.HibernateValidator"/>
        <!-- 如果配置该属性，默认使用classpath下的 ValidationMessages.properties -->
        <!--<property name="validationMessageSource" ref="messageSource"/>-->
    </bean>

    <!-- 类型转换及数据格式化 -->
    <bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
        <property name="converters">
            <set>
                <!-- 添加自定义转换器，支持三种方式
                    1，实现GenericConverter接口
                    2，实现Converter接口
                    3，实现ConverterFactory接口
                -->
                <bean class="com.tsa.springmvc.converter.StringToDateConverter" />
            </set>
        </property>
        <!-- 注入自定义格式化类，实现接口org.springframework.format.Formatter -->
        <!--<property name="formatters">
            <set></set>
        </property>-->
    </bean>

    <!-- 内容协商管理器，自己本身不处理业务逻辑，只是跟扩展名将业务处理交给合适的处理器进行处理  -->
    <!--1、首先检查路径扩展名（如my.pdf）；2、其次检查Parameter（如my?format=pdf）；3、检查Accept Header-->
    <bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
        <!-- 扩展名至mimeType的映射,即 /user.json => application/json -->
        <property name="favorPathExtension" value="true"/>
        <!-- 用于开启 /userinfo/123?format=json 的支持 -->
        <property name="favorParameter" value="true"/>
        <property name="parameterName" value="format"/>
        <!-- 是否忽略Accept Header -->
        <property name="ignoreAcceptHeader" value="false"/>
        <property name="mediaTypes"> <!--扩展名到MIME的映射；favorPathExtension, favorParameter是true时起作用  -->
            <value>
                json=application/json
                xml=application/xml
                html=text/html
            </value>
        </property>
        <!-- 默认的content type -->
        <property name="defaultContentType" value="text/html"/>
    </bean>

    <!-- 默认的视图解析器 在上边的解析错误时使用 (默认使用html)- -->
    <bean id="defaultViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver"
          p:order="1">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <property name="contentType" value="text/html"/>
        <property name="prefix" value="/WEB-INF/views/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <!-- 可以直接映射请求路径与视图，不需要实现控制类 -->
    <mvc:view-controller path="/" view-name="redirect:/index" />

    <!-- 采用容器默认的servlet处理器 -->
    <!-- 当在web.xml中 DispatcherServlet使用 <url-pattern>/</url-pattern> 映射时，能映射静态资源 -->
    <mvc:default-servlet-handler/>

    <!-- 静态资源映射 -->
    <mvc:resources mapping="/static/**" location="/WEB-INF/static/"/>

</beans>