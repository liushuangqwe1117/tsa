<?xml version="1.0" encoding="utf-8" ?>
<!--
参考：
http://www.cnblogs.com/warking/p/5710303.html
https://logback.qos.ch/manual/index.html
-->

<!--根节点configuration，有以下属性
debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false
scan：当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒
            当scan为true时，此属性生效。默认的时间间隔为1分钟。
-->
<configuration debug="false" scan="true" scanPeriod="60 seconds">
    <!-- 子节点1：<property>
        用来定义变量值，它有两个属性name和value，通过<property>定义的值会被插入到logger上下文中可以使“${}”来使用变量。
　　　　 name: 变量的名称
　　　　 value: 的值时变量定义的值
    -->
    <property name="appName" value="tsa-logback"/>
    <property name="log.dir" value="./log"/>

    <!-- 子节点2：contextName
        用来设置上下文名称，每个logger都关联到logger上下文，默认上下文名称为default。
        但可以使用<contextName>设置成其他名字，用于区分不同应用程序的记录。一旦设置，不能修改
    -->
    <contextName>${appName}</contextName>

    <!--子节点3：<timestamp>
        获取时间戳字符串，他有两个属性key和datePattern
        key: 标识此<timestamp> 的名字；
　　　　 datePattern: 设置将当前时间（解析配置文件的时间）转换为字符串的模式，遵循java.text.SimpleDateFormat的格式。
        该值可以当作属性被引用
    -->
    <timestamp key="bySecond" datePattern="yyyyMMdd'T'HHmmss"/>
    <!--<contextName>${bySecond}</contextName>-->

    <!--子节点4：<appender>
        负责写日志的组件，它有两个必要属性name和class。name指定appender名称，class指定appender的全限定名
    -->
    <!--4.1：ConsoleAppender 把日志输出到控制台，有以下子节点：
        <encoder>：对日志进行格式化。（具体参数稍后讲解 ）
    　　 <target>：字符串System.out(默认)或者System.err（区别不多说了）
    -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">　　
        <encoder>
            <!--参考：https://logback.qos.ch/manual/layouts.html-->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%contextName] [%thread] %-5level %logger [%file:%line] - %msg%n　</pattern>
        </encoder>
    </appender>


    <!--4.2 FileAppender：把日志添加到文件，有以下子节点：
          <file>：被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。
　　　　　　<append>：如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true
　　　　　　<encoder>：对记录事件进行格式化。（具体参数稍后讲解 ）
　　　　　　<prudent>：如果是 true，日志会被安全的写入文件，即使其他的FileAppender也在向此文件做写入操作，效率低，默认是 false
    -->
    <!--<appender name="FILE" class="ch.qos.logback.core.FileAppender">
　　　　<file>testFile.log</file>
　　　　<append>true</append>
　　　　<encoder>
　　　　　　<pattern>%-4relative [%thread] %-5level %logger{35} - %msg%n</pattern>
　　　　</encoder>
　　 </appender>-->


    <!--4.3 RollingFileAppender：滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件。有以下子节点：
         <file>：被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。
         <append>：如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true。
         <rollingPolicy>:当发生滚动时，决定RollingFileAppender的行为，涉及文件移动和重命名。属性class定义具体的滚动策略类
                   class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy"： 最常用的滚动策略，它根据时间来制定滚动策略，
                   既负责滚动也负责出发滚动。有以下子节点：
                 <fileNamePattern>：必要节点，包含文件名及“%d”转换符，“%d”可以包含一个java.text.SimpleDateFormat指定的时间格式，如：%d{yyyy-MM}。
                                    如果直接使用 %d，默认格式是 yyyy-MM-dd。RollingFileAppender的file字节点可有可无，通过设置file，
                                    可以为活动文件和归档文件指定不同位置，当前日志总是记录到file指定的文件（活动文件），活动文件的名字不会改变；
                                    如果没设置file，活动文件的名字会根据fileNamePattern 的值，每隔一段时间改变一次。“/”或者“\”会被当做目录分隔符。
    　　　　　　　　<maxHistory>: 可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件。假设设置每个月滚动，且<maxHistory>是6，则只保存最近6个月的文件，
                                删除之前的旧文件。注意，删除旧文件是，那些为了归档而创建的目录也会被删除。

    　　　　　　  class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy"： 查看当前活动文件的大小，
                                如果超过指定大小会告知RollingFileAppender 触发当前活动文件滚动。只有一个节点:
    　　　　　　　　    <maxFileSize>:这是活动文件的大小，默认值是10MB。
    　　　　　　　　    <prudent>：当为true时，不支持FixedWindowRollingPolicy。支持TimeBasedRollingPolicy，但是有两个限制，1不支持也不允许文件压缩，2不能设置file属性，必须留空。

    　　　<triggeringPolicy >: 告知 RollingFileAppender 合适激活滚动

        还有SocketAppender、SMTPAppender、DBAppender、SyslogAppender、SiftingAppender，并不常用，这里就不详解了
    -->
    <!--配置每天生成一个日志文件，保存30天的日志文件。-->
    <appender name="DAILY_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--<file></file>-->　　　　　　　　　　　　
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">　　　　　　　　　　　　　　
            <fileNamePattern>logFile.%d{yyyy-MM-dd}.log</fileNamePattern>　　　　　　　　　　　　　　
            <maxHistory>30</maxHistory>　　　　　　
        </rollingPolicy>　　　　　　　　　　　　
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">　　　　　　　　　　　　　　
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%contextName] [%thread] %-5level %logger [%file:%line] - %msg%n　</pattern>
        </encoder>　　　　　　
    </appender>

    <!--配置表示同时按照天和大小进行回滚，如果跨天和日志文件大于5M，就会生成一个zip文件 -->
    <appender name="ENUM_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>WARN</level>
        </filter>　　　　　　　　　
        <file>test.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy"><!-- rollover daily -->
            <FileNamePattern>test-%d{yyyy-MM-dd}.%i.zip</FileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>5MB</maxFileSize><!-- or whenever the file size reaches 50MB -->
            </timeBasedFileNamingAndTriggeringPolicy>
            <maxHistory>5</maxHistory>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">　　　
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%contextName] [%thread] %-5level %logger [%file:%line] - %msg%n　</pattern>
        </encoder>　　　　　　　　
    </appender>

    <!--子节点5：<logger>
        用来设置某一个包或具体的某一个类的日志打印级别、以及指定<appender>。<logger>仅有一个name属性，一个可选的level和一个可选的addtivity属性。
        可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个logger
        　　　　name: 用来指定受此logger约束的某一个包或者具体的某一个类。
        　　　　level: 用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL和OFF，还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。 如果未设置此属性，那么当前loger将会继承上级的级别。
               additivity: 是否向上级logger传递打印信息。默认是true
    -->
    <!-- additivity="false"且指定了appender-ref为ENUM_FILE，所以只会输出到文件，不会输出到控制台
         logger指定在日志级别为INFO,但是appender指定的日志级别为WARN，会覆盖logger的日志级别
         所以WARN以下的日志级别信息都不会被输出
     -->
    <logger name="sysLog" level="INFO" additivity="false" >
        <appender-ref ref="ENUM_FILE"/>
    </logger>

    <!-- 子节点5：<root>
            它也是<loger>元素，但是它是根loger,是所有<loger>的上级。只有一个level属性，因为name已经被命名为"root",且已经是最上级了。
        　　level: 用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL和OFF，不能设置为INHERITED或者同义词NULL。 默认是DEBUG。
    -->
    <root level="DEBUG">
        <appender-ref ref="STDOUT"/>
    </root>
    <!-- 指定特定包的日志级别，这样可以设置过滤 -->
    <logger name="com.tsa.log.loback.excludelog" level="ERROR"/>
</configuration>